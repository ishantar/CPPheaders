/* note: decimal integers from 0 to 64 are currently recognized.
 * if the result of an operation would fall outside this range, an ARITH_ERR_* token is
 *  emitted (usually ARITH_ERR_MIN or ARITH_ERR_MAX).
 * for `ARITH_REP' and `ARITH_SEQ', items are emitted with separating commas. a trailing
 *  comma is suppressed.
 * for `ARITH_REP', `v' (the item repeated) may be any token sequence, including commas.
 * for `ARITH_SEQ', `a' and `z' (the start and end items) must be recognized as numbers.
 *  ascending or descending order is allowed.
 * with one exception (the item to repeat in ARITH_REP), any argument supplied to a
 *  `CPPArith' macro must be, or expand to, either: i) a recognized number, or ii) a
 *  sentinel token defined internally (eg. ARITH_ERR_MAX).
 * where possible, supplying erronious arguments causes a preprossessing error. in some
 *  cases, unfortunately, it may not.
 */
cpparith.h:	ARITH_INCR(x)         -> x+1
		ARITH_DECR(x)         -> x-1
		ARITH_ADD(x,y)        -> x+y
		ARITH_SUB(x,y)        -> x-y
		ARITH_MUL(x,y)        -> x*y
		ARITH_DIV(x,y)        -> x/y
		ARITH_MOD(x,y)        -> x%y

		ARITH_MAX(x,y)        -> x>y ? x : y
		ARITH_MIN(x,y)        -> x<y ? x : y

		ARITH_REP(n,v)        -> [v[, v[, v[, ...,]]] v]
		ARITH_SEQ(a,z)        -> a[, b[, c[, ...,]] z] 


/* takes an argument `x' which may or may not be "empty" (either not supplied, or expanding
 *  entirely to whitespace).  different results are emitted depending on this condition, 
 * if `x' is nonempty, `y' is emitted: if `y' was not specified, a single comma is produced.
 * if `x' is empty, the result is: i) `n', if `n' was specified, or ii) nothing, if `y' and
 *  `n' were omitted, or iii) _argp_destroy, if only `y' was given (two-argument syntax).
 * two-argument syntax is relevant in cases where `y' is a macro name; it provides implicit
 *  cleanup for potentially unused argument lists (eg. `argp(x,y)(...)').  when _argp_destroy
 * is unnecessary, the suggested usage is `argp(x,y,)'.
 */
argp.h          argp(x,y,n)           -> [[ x nonempty? ]] ? y : n
                argp(x,y)             -> [[ x nonempty? ]] ? y : _argp_destroy
                argp(x)               -> [[ x nonempty? ]] ? , :
                _argp_destroy(...)    ->


argnp.h         argnp(va...)          -> [[ va nonempty? && va nonmultiple? ]] ? NONEMPTY : EMPTY
                argp_opt((x),va...)   -> [[ va nonempty? && va nonmultiple? ]] ? x :


reverse.h       rvrs(a,b,...,z)       -> z, y, ..., a

brv.h           brv(x)                -> [[ x inttype? ]] ? (bitwise-reverse value) : (compile error)
